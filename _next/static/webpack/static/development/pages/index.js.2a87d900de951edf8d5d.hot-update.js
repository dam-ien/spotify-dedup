webpackHotUpdate("static/development/pages/index.js",{

/***/ "./components/main.tsx":
/*!*****************************!*\
  !*** ./components/main.tsx ***!
  \*****************************/
/*! exports provided: DuplicateTrackList, DuplicateTrackListItem, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(global) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DuplicateTrackList", function() { return DuplicateTrackList; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DuplicateTrackListItem", function() { return DuplicateTrackListItem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Main; });
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/regenerator */ "./node_modules/@babel/runtime/regenerator/index.js");
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/toConsumableArray */ "./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js");
/* harmony import */ var _babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/esm/classCallCheck */ "./node_modules/@babel/runtime/helpers/esm/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/esm/createClass */ "./node_modules/@babel/runtime/helpers/esm/createClass.js");
/* harmony import */ var _babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/esm/assertThisInitialized */ "./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js");
/* harmony import */ var _babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @babel/runtime/helpers/esm/inherits */ "./node_modules/@babel/runtime/helpers/esm/inherits.js");
/* harmony import */ var _babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @babel/runtime/helpers/esm/possibleConstructorReturn */ "./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js");
/* harmony import */ var _babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @babel/runtime/helpers/esm/getPrototypeOf */ "./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js");
/* harmony import */ var _babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @babel/runtime/helpers/esm/defineProperty */ "./node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var styled_jsx_style__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! styled-jsx/style */ "./node_modules/styled-jsx/style.js");
/* harmony import */ var styled_jsx_style__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(styled_jsx_style__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_10__);
/* harmony import */ var react_i18next__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! react-i18next */ "./node_modules/react-i18next/dist/es/index.js");
/* harmony import */ var _dedup_process__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../dedup/process */ "./dedup/process.ts");
/* harmony import */ var _dedup_deduplicator__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../dedup/deduplicator */ "./dedup/deduplicator.ts");
/* harmony import */ var _badge__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./badge */ "./components/badge.tsx");
/* harmony import */ var _bmc__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./bmc */ "./components/bmc.tsx");
/* harmony import */ var _panel__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./panel */ "./components/panel.tsx");










var _this = undefined,
    _jsxFileName = "/Users/jmperez/github/spotify-dedup/components/main.tsx";


var __jsx = react__WEBPACK_IMPORTED_MODULE_10___default.a.createElement;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_8__["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { return function () { var Super = Object(_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_7__["default"])(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = Object(_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_7__["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return Object(_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_6__["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }







 //todo: enforce that items are DuplicateTrackListItem

var DuplicateTrackList = function DuplicateTrackList(_ref) {
  var children = _ref.children;
  return __jsx("ul", {
    className: "jsx-1027829577",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 18,
      columnNumber: 3
    }
  }, children, __jsx(styled_jsx_style__WEBPACK_IMPORTED_MODULE_9___default.a, {
    id: "1027829577",
    __self: _this
  }, "ul.jsx-1027829577{padding:0;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=/Users/jmperez/github/spotify-dedup/components/main.tsx */"));
};
var DuplicateTrackListItem = function DuplicateTrackListItem(_ref2) {
  var reason = _ref2.reason,
      trackName = _ref2.trackName,
      trackArtistName = _ref2.trackArtistName;

  var _useTranslation = Object(react_i18next__WEBPACK_IMPORTED_MODULE_11__["useTranslation"])(),
      t = _useTranslation.t,
      i18n = _useTranslation.i18n;

  return __jsx("li", {
    className: "jsx-521931619",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 34,
      columnNumber: 5
    }
  }, reason === 'same-id' && __jsx(_badge__WEBPACK_IMPORTED_MODULE_14__["default"], {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 36,
      columnNumber: 9
    }
  }, t('result.duplicate.reason-same-id')), reason === 'same-name-artist' && __jsx(_badge__WEBPACK_IMPORTED_MODULE_14__["default"], {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 39,
      columnNumber: 9
    }
  }, t('result.duplicate.reason-same-data')), __jsx(react_i18next__WEBPACK_IMPORTED_MODULE_11__["Trans"], {
    i18nKey: "result.duplicate.track",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 41,
      columnNumber: 7
    }
  }, __jsx("span", {
    className: "jsx-521931619",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 42,
      columnNumber: 9
    }
  }, {
    trackName: trackName
  }), " ", __jsx("span", {
    className: "jsx-521931619" + " " + "gray",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 42,
      columnNumber: 38
    }
  }, "by"), ' ', __jsx("span", {
    className: "jsx-521931619",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 43,
      columnNumber: 9
    }
  }, {
    trackArtistName: trackArtistName
  })), __jsx(styled_jsx_style__WEBPACK_IMPORTED_MODULE_9___default.a, {
    id: "521931619",
    __self: _this
  }, ".gray.jsx-521931619{color:#999;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=/Users/jmperez/github/spotify-dedup/components/main.tsx */"));
};

var Status = function Status(_ref3) {
  var toProcess = _ref3.toProcess;

  var _useTranslation2 = Object(react_i18next__WEBPACK_IMPORTED_MODULE_11__["useTranslation"])(),
      t = _useTranslation2.t;

  return __jsx("span", {
    className: "jsx-462225262",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 59,
      columnNumber: 5
    }
  }, __jsx("h3", {
    className: "jsx-462225262",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 60,
      columnNumber: 7
    }
  }, toProcess > 0 || toProcess === null ? t('process.status.finding') : t('process.status.complete')), __jsx(styled_jsx_style__WEBPACK_IMPORTED_MODULE_9___default.a, {
    id: "462225262",
    __self: _this
  }, "h3.jsx-462225262{font-size:24px;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=/Users/jmperez/github/spotify-dedup/components/main.tsx */"));
};

var Main = /*#__PURE__*/function (_React$Component) {
  Object(_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_5__["default"])(Main, _React$Component);

  var _super = _createSuper(Main);

  function Main() {
    var _this2;

    Object(_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__["default"])(this, Main);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this2 = _super.call.apply(_super, [this].concat(args));

    Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_8__["default"])(Object(_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_4__["default"])(_this2), "state", {
      toProcess: null,
      playlists: [],
      savedTracks: {
        status: null,
        duplicates: []
      }
    });

    Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_8__["default"])(Object(_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_4__["default"])(_this2), "removeDuplicates", function (playlist) {
      (function _callee() {
        var index, playlistModel, playlistsCopy;
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.async(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                index = _this2.state.playlists.findIndex(function (p) {
                  return p.playlist.id === playlist.playlist.id;
                });
                playlistModel = _this2.state.playlists[index];

                if (playlistModel.playlist.id === 'starred') {
                  global['alert'] && global['alert']('It is not possible to delete duplicates from your Starred playlist using this tool since this is not supported in the Spotify Web API. You will need to remove these manually.');
                }

                if (!playlistModel.playlist.collaborative) {
                  _context.next = 7;
                  break;
                }

                global['alert'] && global['alert']('It is not possible to delete duplicates from a collaborative playlist using this tool since this is not supported in the Spotify Web API. You will need to remove these manually.');
                _context.next = 20;
                break;

              case 7:
                _context.prev = 7;
                _context.next = 10;
                return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.awrap(_dedup_deduplicator__WEBPACK_IMPORTED_MODULE_13__["PlaylistDeduplicator"].removeDuplicates(_this2.props.api, playlistModel));

              case 10:
                playlistsCopy = Object(_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__["default"])(_this2.state.playlists);
                playlistsCopy[index].duplicates = [];
                playlistsCopy[index].status = 'process.items.removed';

                _this2.setState(_objectSpread({}, _this2.state, {
                  playlists: Object(_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__["default"])(playlistsCopy)
                }));

                if (global['ga']) {
                  global['ga']('send', 'event', 'spotify-dedup', 'playlist-removed-duplicates');
                }

                _context.next = 20;
                break;

              case 17:
                _context.prev = 17;
                _context.t0 = _context["catch"](7);
                global['Raven'] && global['Raven'].captureMessage("Exception trying to remove duplicates from playlist", {
                  extra: {
                    duplicates: playlistModel.duplicates
                  }
                });

              case 20:
              case "end":
                return _context.stop();
            }
          }
        }, null, null, [[7, 17]], Promise);
      })();
    });

    return _this2;
  }

  Object(_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__["default"])(Main, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this3 = this;

      var process = new _dedup_process__WEBPACK_IMPORTED_MODULE_12__["default"]();
      process.on('updateState', function (state) {
        _this3.setState(state);
      });
      process.process(this.props.api, this.props.user);
    }
  }, {
    key: "removeDuplicatesInSavedTracks",
    value: function removeDuplicatesInSavedTracks() {
      var _this4 = this;

      (function _callee2() {
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.async(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.awrap(_dedup_deduplicator__WEBPACK_IMPORTED_MODULE_13__["SavedTracksDeduplicator"].removeDuplicates(_this4.props.api, _this4.state.savedTracks));

              case 2:
                _this4.setState(_objectSpread({}, _this4.state, {
                  savedTracks: {
                    duplicates: [],
                    status: 'process.items.removed'
                  }
                }));

                if (global['ga']) {
                  global['ga']('send', 'event', 'spotify-dedup', 'saved-tracks-removed-duplicates');
                }

              case 4:
              case "end":
                return _context2.stop();
            }
          }
        }, null, null, null, Promise);
      })();
    }
  }, {
    key: "render",
    value: function render() {
      var _this5 = this;

      var totalDuplicates = this.state.playlists.length === 0 ? 0 : this.state.playlists.reduce(function (prev, current) {
        return prev + current.duplicates.length;
      }, 0) + this.state.savedTracks.duplicates.length;
      return __jsx("div", {
        className: "jsx-115715298",
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 192,
          columnNumber: 7
        }
      }, __jsx(Status, {
        toProcess: this.state.toProcess,
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 193,
          columnNumber: 9
        }
      }), __jsx(_panel__WEBPACK_IMPORTED_MODULE_16__["default"], {
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 194,
          columnNumber: 9
        }
      }, this.state.toProcess === null && __jsx(react_i18next__WEBPACK_IMPORTED_MODULE_11__["Translation"], {
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 196,
          columnNumber: 13
        }
      }, function (t) {
        return t('process.reading-library');
      }), this.state.toProcess > 0 && __jsx(react_i18next__WEBPACK_IMPORTED_MODULE_11__["Translation"], {
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 199,
          columnNumber: 13
        }
      }, function (t) {
        return t('process.processing', {
          count: _this5.state.toProcess
        });
      }), this.state.toProcess === 0 && totalDuplicates > 0 && __jsx("span", {
        className: "jsx-115715298",
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 204,
          columnNumber: 13
        }
      }, __jsx(react_i18next__WEBPACK_IMPORTED_MODULE_11__["Translation"], {
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 205,
          columnNumber: 15
        }
      }, function (t) {
        return t('process.status.complete.body');
      }), ' ', __jsx(react_i18next__WEBPACK_IMPORTED_MODULE_11__["Translation"], {
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 208,
          columnNumber: 15
        }
      }, function (t) {
        return __jsx("span", {
          dangerouslySetInnerHTML: {
            __html: t('process.status.complete.dups.body', {
              strongOpen: '<strong>',
              strongClose: '</strong>'
            })
          },
          className: "jsx-115715298",
          __self: _this5,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 210,
            columnNumber: 19
          }
        });
      }), __jsx(_bmc__WEBPACK_IMPORTED_MODULE_15__["default"], {
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 220,
          columnNumber: 15
        }
      })), this.state.toProcess === 0 && totalDuplicates === 0 && __jsx("span", {
        className: "jsx-115715298",
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 224,
          columnNumber: 13
        }
      }, __jsx(react_i18next__WEBPACK_IMPORTED_MODULE_11__["Translation"], {
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 225,
          columnNumber: 15
        }
      }, function (t) {
        return t('process.status.complete.body');
      }), __jsx("br", {
        className: "jsx-115715298",
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 228,
          columnNumber: 15
        }
      }), __jsx(react_i18next__WEBPACK_IMPORTED_MODULE_11__["Translation"], {
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 229,
          columnNumber: 15
        }
      }, function (t) {
        return t('process.status.complete.nodups.body');
      }), __jsx(_bmc__WEBPACK_IMPORTED_MODULE_15__["default"], {
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 232,
          columnNumber: 15
        }
      }))), __jsx("ul", {
        className: "jsx-115715298" + " " + "playlists-list",
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 237,
          columnNumber: 9
        }
      }, (this.state.savedTracks.duplicates.length || this.state.savedTracks.status) && __jsx("li", {
        className: "jsx-115715298" + " " + "playlists-list-item media",
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 240,
          columnNumber: 13
        }
      }, __jsx("div", {
        className: "jsx-115715298" + " " + "img",
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 241,
          columnNumber: 15
        }
      }, __jsx("img", {
        width: "100",
        height: "100",
        src: './placeholder.png',
        className: "jsx-115715298" + " " + "playlists-list-item__img",
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 242,
          columnNumber: 17
        }
      })), __jsx("div", {
        className: "jsx-115715298" + " " + "bd",
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 249,
          columnNumber: 15
        }
      }, __jsx("span", {
        className: "jsx-115715298" + " " + "playlists-list-item__name",
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 250,
          columnNumber: 17
        }
      }, __jsx(react_i18next__WEBPACK_IMPORTED_MODULE_11__["Translation"], {
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 251,
          columnNumber: 19
        }
      }, function (t) {
        return t('process.saved.title');
      })), this.state.savedTracks.status && __jsx(_badge__WEBPACK_IMPORTED_MODULE_14__["default"], {
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 254,
          columnNumber: 19
        }
      }, __jsx(react_i18next__WEBPACK_IMPORTED_MODULE_11__["Translation"], {
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 254,
          columnNumber: 26
        }
      }, function (t) {
        return t(_this5.state.savedTracks.status);
      })), this.state.savedTracks.duplicates.length != 0 && __jsx("span", {
        className: "jsx-115715298",
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 259,
          columnNumber: 19
        }
      }, __jsx("span", {
        className: "jsx-115715298",
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 260,
          columnNumber: 21
        }
      }, __jsx(react_i18next__WEBPACK_IMPORTED_MODULE_11__["Translation"], {
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 261,
          columnNumber: 23
        }
      }, function (t) {
        return t('process.saved.duplicates', {
          count: _this5.state.savedTracks.duplicates.length
        });
      })), __jsx("button", {
        onClick: function onClick() {
          return _this5.removeDuplicatesInSavedTracks();
        },
        className: "jsx-115715298" + " " + "btn btn-primary btn-sm playlist-list-item__btn",
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 269,
          columnNumber: 21
        }
      }, __jsx(react_i18next__WEBPACK_IMPORTED_MODULE_11__["Translation"], {
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 273,
          columnNumber: 23
        }
      }, function (t) {
        return t('process.saved.remove-button');
      })), __jsx(DuplicateTrackList, {
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 277,
          columnNumber: 21
        }
      }, this.state.savedTracks.duplicates.map(function (duplicate, index) {
        return __jsx(DuplicateTrackListItem, {
          key: index,
          reason: duplicate.reason,
          trackName: duplicate.track.name,
          trackArtistName: duplicate.track.artists[0].name,
          __self: _this5,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 280,
            columnNumber: 27
          }
        });
      }))))), this.state.playlists.filter(function (p) {
        return p.duplicates.length || p.status != '';
      }).map(function (playlist, index) {
        return __jsx("li", {
          key: index,
          className: "jsx-115715298" + " " + "playlists-list-item media",
          __self: _this5,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 297,
            columnNumber: 15
          }
        }, __jsx("div", {
          className: "jsx-115715298" + " " + "img",
          __self: _this5,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 298,
            columnNumber: 17
          }
        }, __jsx("img", {
          width: "100",
          height: "100",
          src: playlist.playlist.images && playlist.playlist.images[0] && playlist.playlist.images[0].url,
          className: "jsx-115715298" + " " + "playlists-list-item__img",
          __self: _this5,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 299,
            columnNumber: 19
          }
        })), __jsx("div", {
          className: "jsx-115715298" + " " + "bd",
          __self: _this5,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 310,
            columnNumber: 17
          }
        }, __jsx("span", {
          className: "jsx-115715298" + " " + "playlists-list-item__name",
          __self: _this5,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 311,
            columnNumber: 19
          }
        }, playlist.playlist.name), playlist.status && __jsx(_badge__WEBPACK_IMPORTED_MODULE_14__["default"], {
          __self: _this5,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 314,
            columnNumber: 39
          }
        }, __jsx(react_i18next__WEBPACK_IMPORTED_MODULE_11__["Translation"], {
          __self: _this5,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 315,
            columnNumber: 21
          }
        }, function (t) {
          return t(playlist.status);
        })), playlist.duplicates.length != 0 && __jsx("span", {
          className: "jsx-115715298",
          __self: _this5,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 319,
            columnNumber: 21
          }
        }, __jsx("span", {
          className: "jsx-115715298",
          __self: _this5,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 320,
            columnNumber: 23
          }
        }, __jsx(react_i18next__WEBPACK_IMPORTED_MODULE_11__["Translation"], {
          __self: _this5,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 321,
            columnNumber: 25
          }
        }, function (t) {
          return t('process.playlist.duplicates', {
            count: playlist.duplicates.length
          });
        })), __jsx("button", {
          onClick: function onClick() {
            return _this5.removeDuplicates(playlist);
          },
          className: "jsx-115715298" + " " + "btn btn-primary btn-sm playlist-list-item__btn",
          __self: _this5,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 329,
            columnNumber: 23
          }
        }, __jsx(react_i18next__WEBPACK_IMPORTED_MODULE_11__["Translation"], {
          __self: _this5,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 333,
            columnNumber: 25
          }
        }, function (t) {
          return t('process.playlist.remove-button');
        })), __jsx(DuplicateTrackList, {
          __self: _this5,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 337,
            columnNumber: 23
          }
        }, playlist.duplicates.map(function (duplicate, index) {
          return __jsx(DuplicateTrackListItem, {
            key: index,
            reason: duplicate.reason,
            trackName: duplicate.track.name,
            trackArtistName: duplicate.track.artists[0].name,
            __self: _this5,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 339,
              columnNumber: 27
            }
          });
        })))));
      })), __jsx(styled_jsx_style__WEBPACK_IMPORTED_MODULE_9___default.a, {
        id: "115715298",
        __self: this
      }, ".bd.jsx-115715298{position:relative;}.media.jsx-115715298,.bd.jsx-115715298{overflow:hidden;_overflow:visible;zoom:1;}.media.jsx-115715298 .img.jsx-115715298{float:left;margin-right:20px;}img.jsx-115715298{vertical-align:middle;}.playlists-list-item.jsx-115715298{margin-bottom:2rem;}.playlists-list-item__img.jsx-115715298{width:100px;}.btn.jsx-115715298{display:inline-block;padding:6px 12px;margin-bottom:0;font-size:14px;font-weight:400;line-height:1.428571429;text-align:center;white-space:nowrap;vertical-align:middle;background-image:none;border:1px solid transparent;border-radius:4px;cursor:pointer;}.btn-primary.jsx-115715298{color:#fff;background-color:#428bca;border-color:#357ebd;}.btn-primary.jsx-115715298:hover{background-color:#5094ce;}.playlist-list-item__btn.jsx-115715298{max-width:50%;position:absolute;right:0;top:0;}@media (max-width:700px){.playlist-list-item__btn.jsx-115715298{position:relative;max-width:100%;}}.playlists-list-item__name.jsx-115715298{display:block;font-weight:bold;max-width:50%;}ul.jsx-115715298{padding:0;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9qbXBlcmV6L2dpdGh1Yi9zcG90aWZ5LWRlZHVwL2NvbXBvbmVudHMvbWFpbi50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBaVdXLEFBR2lDLEFBS0YsQUFNTCxBQUtXLEFBSUgsQUFJUCxBQUlTLEFBZ0JWLEFBTWMsQUFJWCxBQVFNLEFBTU4sQUFNSixVQUNaLENBL0RvQixBQWlDTyxDQXBCM0IsRUE4Qm9CLEFBY0QsRUEvREMsRUFMcEIsQUE4RG1CLENBMUNuQixFQVFtQixDQVpuQixHQWtDQSxJQXRDQSxFQXlEZ0IsQ0FkTixDQVFSLENBekRPLEVBdUNjLEVBaEJMLEVBMkJWLENBakRSLElBK0RBLENBYkEsUUEzQmlCLEdBZ0JqQixZQWZrQixnQkFDUSx3QkFDTixrQkFDQyxtQkFDRyxzQkFDQSxzQkFDTyw2QkFDWCxrQkFDSCxlQUNqQiIsImZpbGUiOiIvVXNlcnMvam1wZXJlei9naXRodWIvc3BvdGlmeS1kZWR1cC9jb21wb25lbnRzL21haW4udHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZVRyYW5zbGF0aW9uLCBUcmFucywgVHJhbnNsYXRpb24gfSBmcm9tICdyZWFjdC1pMThuZXh0JztcbmltcG9ydCB7IFBsYXlsaXN0TW9kZWwgfSBmcm9tICcuLi9kZWR1cC90eXBlcyc7XG5pbXBvcnQgeyBTcG90aWZ5VXNlclR5cGUsIFNwb3RpZnlUcmFja1R5cGUgfSBmcm9tICcuLi9kZWR1cC9zcG90aWZ5LWFwaSc7XG5cbmltcG9ydCBQcm9jZXNzIGZyb20gJy4uL2RlZHVwL3Byb2Nlc3MnO1xuaW1wb3J0IHtcbiAgUGxheWxpc3REZWR1cGxpY2F0b3IsXG4gIFNhdmVkVHJhY2tzRGVkdXBsaWNhdG9yLFxufSBmcm9tICcuLi9kZWR1cC9kZWR1cGxpY2F0b3InO1xuXG5pbXBvcnQgQmFkZ2UgZnJvbSAnLi9iYWRnZSc7XG5pbXBvcnQgQnV5TWVBQ29mZmVlIGZyb20gJy4vYm1jJztcbmltcG9ydCBQYW5lbCBmcm9tICcuL3BhbmVsJztcblxuLy90b2RvOiBlbmZvcmNlIHRoYXQgaXRlbXMgYXJlIER1cGxpY2F0ZVRyYWNrTGlzdEl0ZW1cbmV4cG9ydCBjb25zdCBEdXBsaWNhdGVUcmFja0xpc3QgPSAoeyBjaGlsZHJlbiB9KSA9PiAoXG4gIDx1bD5cbiAgICB7Y2hpbGRyZW59XG4gICAgPHN0eWxlIGpzeD57YFxuICAgICAgdWwge1xuICAgICAgICBwYWRkaW5nOiAwO1xuICAgICAgfVxuICAgIGB9PC9zdHlsZT5cbiAgPC91bD5cbik7XG5leHBvcnQgY29uc3QgRHVwbGljYXRlVHJhY2tMaXN0SXRlbSA9ICh7XG4gIHJlYXNvbixcbiAgdHJhY2tOYW1lLFxuICB0cmFja0FydGlzdE5hbWUsXG59KSA9PiB7XG4gIGNvbnN0IHsgdCwgaTE4biB9ID0gdXNlVHJhbnNsYXRpb24oKTtcbiAgcmV0dXJuIChcbiAgICA8bGk+XG4gICAgICB7cmVhc29uID09PSAnc2FtZS1pZCcgJiYgKFxuICAgICAgICA8QmFkZ2U+e3QoJ3Jlc3VsdC5kdXBsaWNhdGUucmVhc29uLXNhbWUtaWQnKX08L0JhZGdlPlxuICAgICAgKX1cbiAgICAgIHtyZWFzb24gPT09ICdzYW1lLW5hbWUtYXJ0aXN0JyAmJiAoXG4gICAgICAgIDxCYWRnZT57dCgncmVzdWx0LmR1cGxpY2F0ZS5yZWFzb24tc2FtZS1kYXRhJyl9PC9CYWRnZT5cbiAgICAgICl9XG4gICAgICA8VHJhbnMgaTE4bktleT1cInJlc3VsdC5kdXBsaWNhdGUudHJhY2tcIj5cbiAgICAgICAgPHNwYW4+e3sgdHJhY2tOYW1lIH19PC9zcGFuPiA8c3BhbiBjbGFzc05hbWU9XCJncmF5XCI+Ynk8L3NwYW4+eycgJ31cbiAgICAgICAgPHNwYW4+e3sgdHJhY2tBcnRpc3ROYW1lIH19PC9zcGFuPlxuICAgICAgPC9UcmFucz5cbiAgICAgIDxzdHlsZSBqc3g+XG4gICAgICAgIHtgXG4gICAgICAgICAgLmdyYXkge1xuICAgICAgICAgICAgY29sb3I6ICM5OTk7XG4gICAgICAgICAgfVxuICAgICAgICBgfVxuICAgICAgPC9zdHlsZT5cbiAgICA8L2xpPlxuICApO1xufTtcblxuY29uc3QgU3RhdHVzID0gKHsgdG9Qcm9jZXNzIH0pID0+IHtcbiAgY29uc3QgeyB0IH0gPSB1c2VUcmFuc2xhdGlvbigpO1xuICByZXR1cm4gKFxuICAgIDxzcGFuPlxuICAgICAgPGgzPlxuICAgICAgICB7dG9Qcm9jZXNzID4gMCB8fCB0b1Byb2Nlc3MgPT09IG51bGxcbiAgICAgICAgICA/IHQoJ3Byb2Nlc3Muc3RhdHVzLmZpbmRpbmcnKVxuICAgICAgICAgIDogdCgncHJvY2Vzcy5zdGF0dXMuY29tcGxldGUnKX1cbiAgICAgIDwvaDM+XG4gICAgICA8c3R5bGUganN4PlxuICAgICAgICB7YFxuICAgICAgICAgIGgzIHtcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMjRweDtcbiAgICAgICAgICB9XG4gICAgICAgIGB9XG4gICAgICA8L3N0eWxlPlxuICAgIDwvc3Bhbj5cbiAgKTtcbn07XG5cbnR5cGUgU3RhdGVUeXBlID0ge1xuICB0b1Byb2Nlc3M/OiBudW1iZXI7XG4gIHBsYXlsaXN0czogQXJyYXk8UGxheWxpc3RNb2RlbD47XG4gIHNhdmVkVHJhY2tzOiB7XG4gICAgc3RhdHVzPzogc3RyaW5nO1xuICAgIGR1cGxpY2F0ZXM6IEFycmF5PHtcbiAgICAgIGluZGV4OiBudW1iZXI7XG4gICAgICByZWFzb246IHN0cmluZztcbiAgICAgIHRyYWNrOiBTcG90aWZ5VHJhY2tUeXBlO1xuICAgIH0+O1xuICB9O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTWFpbiBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDx7XG4gIGFwaTogYW55O1xuICB1c2VyOiBTcG90aWZ5VXNlclR5cGU7XG59PiB7XG4gIHN0YXRlOiBTdGF0ZVR5cGUgPSB7XG4gICAgdG9Qcm9jZXNzOiBudWxsLFxuICAgIHBsYXlsaXN0czogW10sXG4gICAgc2F2ZWRUcmFja3M6IHtcbiAgICAgIHN0YXR1czogbnVsbCxcbiAgICAgIGR1cGxpY2F0ZXM6IFtdLFxuICAgIH0sXG4gIH07XG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIGNvbnN0IHByb2Nlc3MgPSBuZXcgUHJvY2VzcygpO1xuICAgIHByb2Nlc3Mub24oJ3VwZGF0ZVN0YXRlJywgc3RhdGUgPT4ge1xuICAgICAgdGhpcy5zZXRTdGF0ZShzdGF0ZSk7XG4gICAgfSk7XG4gICAgcHJvY2Vzcy5wcm9jZXNzKHRoaXMucHJvcHMuYXBpLCB0aGlzLnByb3BzLnVzZXIpO1xuICB9XG5cbiAgcmVtb3ZlRHVwbGljYXRlcyA9IChwbGF5bGlzdDogUGxheWxpc3RNb2RlbCkgPT4ge1xuICAgIChhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBpbmRleCA9IHRoaXMuc3RhdGUucGxheWxpc3RzLmZpbmRJbmRleChcbiAgICAgICAgcCA9PiBwLnBsYXlsaXN0LmlkID09PSBwbGF5bGlzdC5wbGF5bGlzdC5pZFxuICAgICAgKTtcbiAgICAgIGNvbnN0IHBsYXlsaXN0TW9kZWwgPSB0aGlzLnN0YXRlLnBsYXlsaXN0c1tpbmRleF07XG4gICAgICBpZiAocGxheWxpc3RNb2RlbC5wbGF5bGlzdC5pZCA9PT0gJ3N0YXJyZWQnKSB7XG4gICAgICAgIGdsb2JhbFsnYWxlcnQnXSAmJlxuICAgICAgICAgIGdsb2JhbFsnYWxlcnQnXShcbiAgICAgICAgICAgICdJdCBpcyBub3QgcG9zc2libGUgdG8gZGVsZXRlIGR1cGxpY2F0ZXMgZnJvbSB5b3VyIFN0YXJyZWQgcGxheWxpc3QgdXNpbmcgdGhpcyB0b29sIHNpbmNlIHRoaXMgaXMgbm90IHN1cHBvcnRlZCBpbiB0aGUgU3BvdGlmeSBXZWIgQVBJLiBZb3Ugd2lsbCBuZWVkIHRvIHJlbW92ZSB0aGVzZSBtYW51YWxseS4nXG4gICAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmIChwbGF5bGlzdE1vZGVsLnBsYXlsaXN0LmNvbGxhYm9yYXRpdmUpIHtcbiAgICAgICAgZ2xvYmFsWydhbGVydCddICYmXG4gICAgICAgICAgZ2xvYmFsWydhbGVydCddKFxuICAgICAgICAgICAgJ0l0IGlzIG5vdCBwb3NzaWJsZSB0byBkZWxldGUgZHVwbGljYXRlcyBmcm9tIGEgY29sbGFib3JhdGl2ZSBwbGF5bGlzdCB1c2luZyB0aGlzIHRvb2wgc2luY2UgdGhpcyBpcyBub3Qgc3VwcG9ydGVkIGluIHRoZSBTcG90aWZ5IFdlYiBBUEkuIFlvdSB3aWxsIG5lZWQgdG8gcmVtb3ZlIHRoZXNlIG1hbnVhbGx5LidcbiAgICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBhd2FpdCBQbGF5bGlzdERlZHVwbGljYXRvci5yZW1vdmVEdXBsaWNhdGVzKFxuICAgICAgICAgICAgdGhpcy5wcm9wcy5hcGksXG4gICAgICAgICAgICBwbGF5bGlzdE1vZGVsXG4gICAgICAgICAgKTtcbiAgICAgICAgICBjb25zdCBwbGF5bGlzdHNDb3B5ID0gWy4uLnRoaXMuc3RhdGUucGxheWxpc3RzXTtcbiAgICAgICAgICBwbGF5bGlzdHNDb3B5W2luZGV4XS5kdXBsaWNhdGVzID0gW107XG4gICAgICAgICAgcGxheWxpc3RzQ29weVtpbmRleF0uc3RhdHVzID0gJ3Byb2Nlc3MuaXRlbXMucmVtb3ZlZCc7XG4gICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IC4uLnRoaXMuc3RhdGUsIHBsYXlsaXN0czogWy4uLnBsYXlsaXN0c0NvcHldIH0pO1xuICAgICAgICAgIGlmIChnbG9iYWxbJ2dhJ10pIHtcbiAgICAgICAgICAgIGdsb2JhbFsnZ2EnXShcbiAgICAgICAgICAgICAgJ3NlbmQnLFxuICAgICAgICAgICAgICAnZXZlbnQnLFxuICAgICAgICAgICAgICAnc3BvdGlmeS1kZWR1cCcsXG4gICAgICAgICAgICAgICdwbGF5bGlzdC1yZW1vdmVkLWR1cGxpY2F0ZXMnXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIGdsb2JhbFsnUmF2ZW4nXSAmJlxuICAgICAgICAgICAgZ2xvYmFsWydSYXZlbiddLmNhcHR1cmVNZXNzYWdlKFxuICAgICAgICAgICAgICBgRXhjZXB0aW9uIHRyeWluZyB0byByZW1vdmUgZHVwbGljYXRlcyBmcm9tIHBsYXlsaXN0YCxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGV4dHJhOiB7XG4gICAgICAgICAgICAgICAgICBkdXBsaWNhdGVzOiBwbGF5bGlzdE1vZGVsLmR1cGxpY2F0ZXMsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pKCk7XG4gIH07XG5cbiAgcmVtb3ZlRHVwbGljYXRlc0luU2F2ZWRUcmFja3MoKSB7XG4gICAgKGFzeW5jICgpID0+IHtcbiAgICAgIGF3YWl0IFNhdmVkVHJhY2tzRGVkdXBsaWNhdG9yLnJlbW92ZUR1cGxpY2F0ZXMoXG4gICAgICAgIHRoaXMucHJvcHMuYXBpLFxuICAgICAgICB0aGlzLnN0YXRlLnNhdmVkVHJhY2tzXG4gICAgICApO1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIC4uLnRoaXMuc3RhdGUsXG4gICAgICAgIHNhdmVkVHJhY2tzOiB7XG4gICAgICAgICAgZHVwbGljYXRlczogW10sXG4gICAgICAgICAgc3RhdHVzOiAncHJvY2Vzcy5pdGVtcy5yZW1vdmVkJyxcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuICAgICAgaWYgKGdsb2JhbFsnZ2EnXSkge1xuICAgICAgICBnbG9iYWxbJ2dhJ10oXG4gICAgICAgICAgJ3NlbmQnLFxuICAgICAgICAgICdldmVudCcsXG4gICAgICAgICAgJ3Nwb3RpZnktZGVkdXAnLFxuICAgICAgICAgICdzYXZlZC10cmFja3MtcmVtb3ZlZC1kdXBsaWNhdGVzJ1xuICAgICAgICApO1xuICAgICAgfVxuICAgIH0pKCk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgdG90YWxEdXBsaWNhdGVzID1cbiAgICAgIHRoaXMuc3RhdGUucGxheWxpc3RzLmxlbmd0aCA9PT0gMFxuICAgICAgICA/IDBcbiAgICAgICAgOiB0aGlzLnN0YXRlLnBsYXlsaXN0cy5yZWR1Y2UoXG4gICAgICAgICAgICAocHJldiwgY3VycmVudCkgPT4gcHJldiArIGN1cnJlbnQuZHVwbGljYXRlcy5sZW5ndGgsXG4gICAgICAgICAgICAwXG4gICAgICAgICAgKSArIHRoaXMuc3RhdGUuc2F2ZWRUcmFja3MuZHVwbGljYXRlcy5sZW5ndGg7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXY+XG4gICAgICAgIDxTdGF0dXMgdG9Qcm9jZXNzPXt0aGlzLnN0YXRlLnRvUHJvY2Vzc30gLz5cbiAgICAgICAgPFBhbmVsPlxuICAgICAgICAgIHt0aGlzLnN0YXRlLnRvUHJvY2VzcyA9PT0gbnVsbCAmJiAoXG4gICAgICAgICAgICA8VHJhbnNsYXRpb24+e3QgPT4gdCgncHJvY2Vzcy5yZWFkaW5nLWxpYnJhcnknKX08L1RyYW5zbGF0aW9uPlxuICAgICAgICAgICl9XG4gICAgICAgICAge3RoaXMuc3RhdGUudG9Qcm9jZXNzID4gMCAmJiAoXG4gICAgICAgICAgICA8VHJhbnNsYXRpb24+XG4gICAgICAgICAgICAgIHt0ID0+IHQoJ3Byb2Nlc3MucHJvY2Vzc2luZycsIHsgY291bnQ6IHRoaXMuc3RhdGUudG9Qcm9jZXNzIH0pfVxuICAgICAgICAgICAgPC9UcmFuc2xhdGlvbj5cbiAgICAgICAgICApfVxuICAgICAgICAgIHt0aGlzLnN0YXRlLnRvUHJvY2VzcyA9PT0gMCAmJiB0b3RhbER1cGxpY2F0ZXMgPiAwICYmIChcbiAgICAgICAgICAgIDxzcGFuPlxuICAgICAgICAgICAgICA8VHJhbnNsYXRpb24+XG4gICAgICAgICAgICAgICAge3QgPT4gdCgncHJvY2Vzcy5zdGF0dXMuY29tcGxldGUuYm9keScpfVxuICAgICAgICAgICAgICA8L1RyYW5zbGF0aW9uPnsnICd9XG4gICAgICAgICAgICAgIDxUcmFuc2xhdGlvbj5cbiAgICAgICAgICAgICAgICB7dCA9PiAoXG4gICAgICAgICAgICAgICAgICA8c3BhblxuICAgICAgICAgICAgICAgICAgICBkYW5nZXJvdXNseVNldElubmVySFRNTD17e1xuICAgICAgICAgICAgICAgICAgICAgIF9faHRtbDogdCgncHJvY2Vzcy5zdGF0dXMuY29tcGxldGUuZHVwcy5ib2R5Jywge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3Ryb25nT3BlbjogJzxzdHJvbmc+JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0cm9uZ0Nsb3NlOiAnPC9zdHJvbmc+JyxcbiAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgPC9UcmFuc2xhdGlvbj5cbiAgICAgICAgICAgICAgPEJ1eU1lQUNvZmZlZSAvPlxuICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICl9XG4gICAgICAgICAge3RoaXMuc3RhdGUudG9Qcm9jZXNzID09PSAwICYmIHRvdGFsRHVwbGljYXRlcyA9PT0gMCAmJiAoXG4gICAgICAgICAgICA8c3Bhbj5cbiAgICAgICAgICAgICAgPFRyYW5zbGF0aW9uPlxuICAgICAgICAgICAgICAgIHt0ID0+IHQoJ3Byb2Nlc3Muc3RhdHVzLmNvbXBsZXRlLmJvZHknKX1cbiAgICAgICAgICAgICAgPC9UcmFuc2xhdGlvbj5cbiAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgIDxUcmFuc2xhdGlvbj5cbiAgICAgICAgICAgICAgICB7dCA9PiB0KCdwcm9jZXNzLnN0YXR1cy5jb21wbGV0ZS5ub2R1cHMuYm9keScpfVxuICAgICAgICAgICAgICA8L1RyYW5zbGF0aW9uPlxuICAgICAgICAgICAgICA8QnV5TWVBQ29mZmVlIC8+XG4gICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgKX1cbiAgICAgICAgPC9QYW5lbD5cblxuICAgICAgICA8dWwgY2xhc3NOYW1lPVwicGxheWxpc3RzLWxpc3RcIj5cbiAgICAgICAgICB7KHRoaXMuc3RhdGUuc2F2ZWRUcmFja3MuZHVwbGljYXRlcy5sZW5ndGggfHxcbiAgICAgICAgICAgIHRoaXMuc3RhdGUuc2F2ZWRUcmFja3Muc3RhdHVzKSAmJiAoXG4gICAgICAgICAgICA8bGkgY2xhc3NOYW1lPVwicGxheWxpc3RzLWxpc3QtaXRlbSBtZWRpYVwiPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImltZ1wiPlxuICAgICAgICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgICAgICAgIHdpZHRoPVwiMTAwXCJcbiAgICAgICAgICAgICAgICAgIGhlaWdodD1cIjEwMFwiXG4gICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJwbGF5bGlzdHMtbGlzdC1pdGVtX19pbWdcIlxuICAgICAgICAgICAgICAgICAgc3JjPXsnLi9wbGFjZWhvbGRlci5wbmcnfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImJkXCI+XG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwicGxheWxpc3RzLWxpc3QtaXRlbV9fbmFtZVwiPlxuICAgICAgICAgICAgICAgICAgPFRyYW5zbGF0aW9uPnt0ID0+IHQoJ3Byb2Nlc3Muc2F2ZWQudGl0bGUnKX08L1RyYW5zbGF0aW9uPlxuICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgICB7dGhpcy5zdGF0ZS5zYXZlZFRyYWNrcy5zdGF0dXMgJiYgKFxuICAgICAgICAgICAgICAgICAgPEJhZGdlPjxUcmFuc2xhdGlvbj5cbiAgICAgICAgICAgICAgICAgICAge3QgPT4gdCh0aGlzLnN0YXRlLnNhdmVkVHJhY2tzLnN0YXR1cyl9XG4gICAgICAgICAgICAgICAgICA8L1RyYW5zbGF0aW9uPjwvQmFkZ2U+XG4gICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgICB7dGhpcy5zdGF0ZS5zYXZlZFRyYWNrcy5kdXBsaWNhdGVzLmxlbmd0aCAhPSAwICYmIChcbiAgICAgICAgICAgICAgICAgIDxzcGFuPlxuICAgICAgICAgICAgICAgICAgICA8c3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICA8VHJhbnNsYXRpb24+XG4gICAgICAgICAgICAgICAgICAgICAgICB7dCA9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICB0KCdwcm9jZXNzLnNhdmVkLmR1cGxpY2F0ZXMnLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY291bnQ6IHRoaXMuc3RhdGUuc2F2ZWRUcmFja3MuZHVwbGljYXRlcy5sZW5ndGgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgPC9UcmFuc2xhdGlvbj5cbiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiYnRuIGJ0bi1wcmltYXJ5IGJ0bi1zbSBwbGF5bGlzdC1saXN0LWl0ZW1fX2J0blwiXG4gICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gdGhpcy5yZW1vdmVEdXBsaWNhdGVzSW5TYXZlZFRyYWNrcygpfVxuICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgPFRyYW5zbGF0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgICAge3QgPT4gdCgncHJvY2Vzcy5zYXZlZC5yZW1vdmUtYnV0dG9uJyl9XG4gICAgICAgICAgICAgICAgICAgICAgPC9UcmFuc2xhdGlvbj5cbiAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgIDxEdXBsaWNhdGVUcmFja0xpc3Q+XG4gICAgICAgICAgICAgICAgICAgICAge3RoaXMuc3RhdGUuc2F2ZWRUcmFja3MuZHVwbGljYXRlcy5tYXAoXG4gICAgICAgICAgICAgICAgICAgICAgICAoZHVwbGljYXRlLCBpbmRleCkgPT4gKFxuICAgICAgICAgICAgICAgICAgICAgICAgICA8RHVwbGljYXRlVHJhY2tMaXN0SXRlbVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleT17aW5kZXh9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVhc29uPXtkdXBsaWNhdGUucmVhc29ufVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYWNrTmFtZT17ZHVwbGljYXRlLnRyYWNrLm5hbWV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhY2tBcnRpc3ROYW1lPXtkdXBsaWNhdGUudHJhY2suYXJ0aXN0c1swXS5uYW1lfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAgICAgIDwvRHVwbGljYXRlVHJhY2tMaXN0PlxuICAgICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICApfVxuICAgICAgICAgIHt0aGlzLnN0YXRlLnBsYXlsaXN0c1xuICAgICAgICAgICAgLmZpbHRlcihwID0+IHAuZHVwbGljYXRlcy5sZW5ndGggfHwgcC5zdGF0dXMgIT0gJycpXG4gICAgICAgICAgICAubWFwKChwbGF5bGlzdDogUGxheWxpc3RNb2RlbCwgaW5kZXgpID0+IChcbiAgICAgICAgICAgICAgPGxpIGNsYXNzTmFtZT1cInBsYXlsaXN0cy1saXN0LWl0ZW0gbWVkaWFcIiBrZXk9e2luZGV4fT5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImltZ1wiPlxuICAgICAgICAgICAgICAgICAgPGltZ1xuICAgICAgICAgICAgICAgICAgICB3aWR0aD1cIjEwMFwiXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodD1cIjEwMFwiXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInBsYXlsaXN0cy1saXN0LWl0ZW1fX2ltZ1wiXG4gICAgICAgICAgICAgICAgICAgIHNyYz17XG4gICAgICAgICAgICAgICAgICAgICAgcGxheWxpc3QucGxheWxpc3QuaW1hZ2VzICYmXG4gICAgICAgICAgICAgICAgICAgICAgcGxheWxpc3QucGxheWxpc3QuaW1hZ2VzWzBdICYmXG4gICAgICAgICAgICAgICAgICAgICAgcGxheWxpc3QucGxheWxpc3QuaW1hZ2VzWzBdLnVybFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYmRcIj5cbiAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cInBsYXlsaXN0cy1saXN0LWl0ZW1fX25hbWVcIj5cbiAgICAgICAgICAgICAgICAgICAge3BsYXlsaXN0LnBsYXlsaXN0Lm5hbWV9XG4gICAgICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICAgICAgICB7cGxheWxpc3Quc3RhdHVzICYmIDxCYWRnZT5cbiAgICAgICAgICAgICAgICAgICAgPFRyYW5zbGF0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgIHt0ID0+IHQocGxheWxpc3Quc3RhdHVzKX1cbiAgICAgICAgICAgICAgICAgICAgPC9UcmFuc2xhdGlvbj48L0JhZGdlPn1cbiAgICAgICAgICAgICAgICAgIHtwbGF5bGlzdC5kdXBsaWNhdGVzLmxlbmd0aCAhPSAwICYmIChcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgPHNwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICA8VHJhbnNsYXRpb24+XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHt0ID0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdCgncHJvY2Vzcy5wbGF5bGlzdC5kdXBsaWNhdGVzJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY291bnQ6IHBsYXlsaXN0LmR1cGxpY2F0ZXMubGVuZ3RoLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvVHJhbnNsYXRpb24+XG4gICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImJ0biBidG4tcHJpbWFyeSBidG4tc20gcGxheWxpc3QtbGlzdC1pdGVtX19idG5cIlxuICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gdGhpcy5yZW1vdmVEdXBsaWNhdGVzKHBsYXlsaXN0KX1cbiAgICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICA8VHJhbnNsYXRpb24+XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHt0ID0+IHQoJ3Byb2Nlc3MucGxheWxpc3QucmVtb3ZlLWJ1dHRvbicpfVxuICAgICAgICAgICAgICAgICAgICAgICAgPC9UcmFuc2xhdGlvbj5cbiAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgICA8RHVwbGljYXRlVHJhY2tMaXN0PlxuICAgICAgICAgICAgICAgICAgICAgICAge3BsYXlsaXN0LmR1cGxpY2F0ZXMubWFwKChkdXBsaWNhdGUsIGluZGV4KSA9PiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxEdXBsaWNhdGVUcmFja0xpc3RJdGVtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5PXtpbmRleH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWFzb249e2R1cGxpY2F0ZS5yZWFzb259XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhY2tOYW1lPXtkdXBsaWNhdGUudHJhY2submFtZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFja0FydGlzdE5hbWU9e2R1cGxpY2F0ZS50cmFjay5hcnRpc3RzWzBdLm5hbWV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICApKX1cbiAgICAgICAgICAgICAgICAgICAgICA8L0R1cGxpY2F0ZVRyYWNrTGlzdD5cbiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICkpfVxuICAgICAgICA8L3VsPlxuICAgICAgICA8c3R5bGUganN4PlxuICAgICAgICAgIHtgXG4gICAgICAgICAgICAuYmQge1xuICAgICAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC5tZWRpYSxcbiAgICAgICAgICAgIC5iZCB7XG4gICAgICAgICAgICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgICAgICAgICAgIF9vdmVyZmxvdzogdmlzaWJsZTtcbiAgICAgICAgICAgICAgem9vbTogMTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLm1lZGlhIC5pbWcge1xuICAgICAgICAgICAgICBmbG9hdDogbGVmdDtcbiAgICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiAyMHB4O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpbWcge1xuICAgICAgICAgICAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAucGxheWxpc3RzLWxpc3QtaXRlbSB7XG4gICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDJyZW07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC5wbGF5bGlzdHMtbGlzdC1pdGVtX19pbWcge1xuICAgICAgICAgICAgICB3aWR0aDogMTAwcHg7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC5idG4ge1xuICAgICAgICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgICAgICAgICAgIHBhZGRpbmc6IDZweCAxMnB4O1xuICAgICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAwO1xuICAgICAgICAgICAgICBmb250LXNpemU6IDE0cHg7XG4gICAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiA0MDA7XG4gICAgICAgICAgICAgIGxpbmUtaGVpZ2h0OiAxLjQyODU3MTQyOTtcbiAgICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgICAgICAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xuICAgICAgICAgICAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xuICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWltYWdlOiBub25lO1xuICAgICAgICAgICAgICBib3JkZXI6IDFweCBzb2xpZCB0cmFuc3BhcmVudDtcbiAgICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogNHB4O1xuICAgICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC5idG4tcHJpbWFyeSB7XG4gICAgICAgICAgICAgIGNvbG9yOiAjZmZmO1xuICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjNDI4YmNhO1xuICAgICAgICAgICAgICBib3JkZXItY29sb3I6ICMzNTdlYmQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC5idG4tcHJpbWFyeTpob3ZlciB7XG4gICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICM1MDk0Y2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC5wbGF5bGlzdC1saXN0LWl0ZW1fX2J0biB7XG4gICAgICAgICAgICAgIG1heC13aWR0aDogNTAlO1xuICAgICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgICAgICAgIHJpZ2h0OiAwO1xuICAgICAgICAgICAgICB0b3A6IDA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIEBtZWRpYSAobWF4LXdpZHRoOiA3MDBweCkge1xuICAgICAgICAgICAgICAucGxheWxpc3QtbGlzdC1pdGVtX19idG4ge1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgICAgICAgICAgICBtYXgtd2lkdGg6IDEwMCU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLnBsYXlsaXN0cy1saXN0LWl0ZW1fX25hbWUge1xuICAgICAgICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gICAgICAgICAgICAgIG1heC13aWR0aDogNTAlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB1bCB7XG4gICAgICAgICAgICAgIHBhZGRpbmc6IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgYH1cbiAgICAgICAgPC9zdHlsZT5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn1cbiJdfQ== */\n/*@ sourceURL=/Users/jmperez/github/spotify-dedup/components/main.tsx */"));
    }
  }]);

  return Main;
}(react__WEBPACK_IMPORTED_MODULE_10___default.a.Component);


/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../node_modules/webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ })

})
//# sourceMappingURL=index.js.2a87d900de951edf8d5d.hot-update.js.map