{"version":3,"file":"static/webpack/static/development/pages/index.js.d64680d3c32f84d3bef9.hot-update.js","sources":["webpack:///./components/main.tsx"],"sourcesContent":["import React from 'react';\nimport { useTranslation, Translation } from 'react-i18next';\nimport { PlaylistModel } from '../dedup/types';\nimport { SpotifyUserType, SpotifyTrackType } from '../dedup/spotify-api';\n\nimport Process from '../dedup/process';\nimport {\n  PlaylistDeduplicator,\n  SavedTracksDeduplicator,\n} from '../dedup/deduplicator';\n\nimport Badge from './badge';\nimport BuyMeACoffee from './bmc';\nimport Panel from './panel';\n\n//todo: enforce that items are DuplicateTrackListItem\nexport const DuplicateTrackList = ({ children }) => (\n  <ul>\n    {children}\n    <style jsx>{`\n      ul {\n        padding: 0;\n      }\n    `}</style>\n  </ul>\n);\nexport const DuplicateTrackListItem = ({\n  reason,\n  trackName,\n  trackArtistName,\n}) => {\n  const { t, i18n } = useTranslation();\n  return (\n    <li>\n      {reason === 'same-id' && (\n        <Badge>{t('result.duplicate.reason-same-id')}</Badge>\n      )}\n      {reason === 'same-name-artist' && (\n        <Badge>{t('result.duplicate.reason-same-data')}</Badge>\n      )}\n      <Trans i18nKey=\"result.duplicate.track\">\n        <span>{{ trackName }}</span> <span className=\"gray\">by</span>{' '}\n        <span>{{ trackArtistName }}</span>\n      </Trans>\n      <style jsx>\n        {`\n          .gray {\n            color: #999;\n          }\n        `}\n      </style>\n    </li>\n  );\n};\n\nconst Status = ({ toProcess }) => {\n  const { t } = useTranslation();\n  return (\n    <span>\n      <h3>\n        {toProcess > 0 || toProcess === null\n          ? t('process.status.finding')\n          : t('process.status.complete')}\n      </h3>\n      <style jsx>\n        {`\n          h3 {\n            font-size: 24px;\n          }\n        `}\n      </style>\n    </span>\n  );\n};\n\ntype StateType = {\n  toProcess?: number;\n  playlists: Array<PlaylistModel>;\n  savedTracks: {\n    status?: string;\n    duplicates: Array<{\n      index: number;\n      reason: string;\n      track: SpotifyTrackType;\n    }>;\n  };\n};\n\nexport default class Main extends React.Component<{\n  api: any;\n  user: SpotifyUserType;\n}> {\n  state: StateType = {\n    toProcess: null,\n    playlists: [],\n    savedTracks: {\n      status: null,\n      duplicates: [],\n    },\n  };\n  componentDidMount() {\n    const process = new Process();\n    process.on('updateState', state => {\n      this.setState(state);\n    });\n    process.process(this.props.api, this.props.user);\n  }\n\n  removeDuplicates = (playlist: PlaylistModel) => {\n    (async () => {\n      const index = this.state.playlists.findIndex(\n        p => p.playlist.id === playlist.playlist.id\n      );\n      const playlistModel = this.state.playlists[index];\n      if (playlistModel.playlist.id === 'starred') {\n        global['alert'] &&\n          global['alert'](\n            'It is not possible to delete duplicates from your Starred playlist using this tool since this is not supported in the Spotify Web API. You will need to remove these manually.'\n          );\n      }\n      if (playlistModel.playlist.collaborative) {\n        global['alert'] &&\n          global['alert'](\n            'It is not possible to delete duplicates from a collaborative playlist using this tool since this is not supported in the Spotify Web API. You will need to remove these manually.'\n          );\n      } else {\n        try {\n          await PlaylistDeduplicator.removeDuplicates(\n            this.props.api,\n            playlistModel\n          );\n          debugger;\n          const playlistsCopy = [...this.state.playlists];\n          playlistsCopy[index].duplicates = [];\n          playlistsCopy[index].status = 'process.items.removed';\n          this.setState({ ...this.state, playlists: [...playlistsCopy] });\n          if (global['ga']) {\n            global['ga'](\n              'send',\n              'event',\n              'spotify-dedup',\n              'playlist-removed-duplicates'\n            );\n          }\n        } catch (e) {\n          global['Raven'] &&\n            global['Raven'].captureMessage(\n              `Exception trying to remove duplicates from playlist`,\n              {\n                extra: {\n                  duplicates: playlistModel.duplicates,\n                },\n              }\n            );\n        }\n      }\n    })();\n  };\n\n  removeDuplicatesInSavedTracks() {\n    (async () => {\n      await SavedTracksDeduplicator.removeDuplicates(\n        this.props.api,\n        this.state.savedTracks\n      );\n      this.setState({\n        ...this.state,\n        savedTracks: {\n          duplicates: [],\n          status: 'process.items.removed',\n        },\n      });\n      if (global['ga']) {\n        global['ga'](\n          'send',\n          'event',\n          'spotify-dedup',\n          'saved-tracks-removed-duplicates'\n        );\n      }\n    })();\n  }\n\n  render() {\n    const totalDuplicates =\n      this.state.playlists.length === 0\n        ? 0\n        : this.state.playlists.reduce(\n            (prev, current) => prev + current.duplicates.length,\n            0\n          ) + this.state.savedTracks.duplicates.length;\n    return (\n      <div>\n        <Status toProcess={this.state.toProcess} />\n        <Panel>\n          {this.state.toProcess === null && (\n            <Translation>{t => t('process.reading-library')}</Translation>\n          )}\n          {this.state.toProcess > 0 && (\n            <Translation>\n              {t => t('process.processing', { count: this.state.toProcess })}\n            </Translation>\n          )}\n          {this.state.toProcess === 0 && totalDuplicates > 0 && (\n            <span>\n              <Translation>\n                {t => t('process.status.complete.body')}\n              </Translation>{' '}\n              <Translation>\n                {t => (\n                  <span\n                    dangerouslySetInnerHTML={{\n                      __html: t('process.status.complete.dups.body', {\n                        strongOpen: '<strong>',\n                        strongClose: '</strong>',\n                      }),\n                    }}\n                  />\n                )}\n              </Translation>\n              <BuyMeACoffee />\n            </span>\n          )}\n          {this.state.toProcess === 0 && totalDuplicates === 0 && (\n            <span>\n              <Translation>\n                {t => t('process.status.complete.body')}\n              </Translation>\n              <br />\n              <Translation>\n                {t => t('process.status.complete.nodups.body')}\n              </Translation>\n              <BuyMeACoffee />\n            </span>\n          )}\n        </Panel>\n\n        <ul className=\"playlists-list\">\n          {(this.state.savedTracks.duplicates.length ||\n            this.state.savedTracks.status) && (\n            <li className=\"playlists-list-item media\">\n              <div className=\"img\">\n                <img\n                  width=\"100\"\n                  height=\"100\"\n                  className=\"playlists-list-item__img\"\n                  src={'./placeholder.png'}\n                />\n              </div>\n              <div className=\"bd\">\n                <span className=\"playlists-list-item__name\">\n                  <Translation>{t => t('process.saved.title')}</Translation>\n                </span>\n                {this.state.savedTracks.status && (\n                  <Badge><Translation>\n                    {t => t(this.state.savedTracks.status)}\n                  </Translation></Badge>\n                )}\n                {this.state.savedTracks.duplicates.length != 0 && (\n                  <span>\n                    <span>\n                      <Translation>\n                        {t =>\n                          t('process.saved.duplicates', {\n                            count: this.state.savedTracks.duplicates.length,\n                          })\n                        }\n                      </Translation>\n                    </span>\n                    <button\n                      className=\"btn btn-primary btn-sm playlist-list-item__btn\"\n                      onClick={() => this.removeDuplicatesInSavedTracks()}\n                    >\n                      <Translation>\n                        {t => t('process.saved.remove-button')}\n                      </Translation>\n                    </button>\n                    <DuplicateTrackList>\n                      {this.state.savedTracks.duplicates.map(\n                        (duplicate, index) => (\n                          <DuplicateTrackListItem\n                            key={index}\n                            reason={duplicate.reason}\n                            trackName={duplicate.track.name}\n                            trackArtistName={duplicate.track.artists[0].name}\n                          />\n                        )\n                      )}\n                    </DuplicateTrackList>\n                  </span>\n                )}\n              </div>\n            </li>\n          )}\n          {this.state.playlists\n            .filter(p => p.duplicates.length || p.status != '')\n            .map((playlist: PlaylistModel, index) => (\n              <li className=\"playlists-list-item media\" key={index}>\n                <div className=\"img\">\n                  <img\n                    width=\"100\"\n                    height=\"100\"\n                    className=\"playlists-list-item__img\"\n                    src={\n                      playlist.playlist.images &&\n                      playlist.playlist.images[0] &&\n                      playlist.playlist.images[0].url\n                    }\n                  />\n                </div>\n                <div className=\"bd\">\n                  <span className=\"playlists-list-item__name\">\n                    {playlist.playlist.name}\n                  </span>\n                  {playlist.status && <Badge>\n                    <Translation>\n                      {t => t(playlist.status)}\n                    </Translation></Badge>}\n                  {playlist.duplicates.length != 0 && (\n                    <span>\n                      <span>\n                        <Translation>\n                          {t =>\n                            t('process.playlist.duplicates', {\n                              count: playlist.duplicates.length,\n                            })\n                          }\n                        </Translation>\n                      </span>\n                      <button\n                        className=\"btn btn-primary btn-sm playlist-list-item__btn\"\n                        onClick={() => this.removeDuplicates(playlist)}\n                      >\n                        <Translation>\n                          {t => t('process.playlist.remove-button')}\n                        </Translation>\n                      </button>\n                      <DuplicateTrackList>\n                        {playlist.duplicates.map((duplicate, index) => (\n                          <DuplicateTrackListItem\n                            key={index}\n                            reason={duplicate.reason}\n                            trackName={duplicate.track.name}\n                            trackArtistName={duplicate.track.artists[0].name}\n                          />\n                        ))}\n                      </DuplicateTrackList>\n                    </span>\n                  )}\n                </div>\n              </li>\n            ))}\n        </ul>\n        <style jsx>\n          {`\n            .bd {\n              position: relative;\n            }\n\n            .media,\n            .bd {\n              overflow: hidden;\n              _overflow: visible;\n              zoom: 1;\n            }\n\n            .media .img {\n              float: left;\n              margin-right: 20px;\n            }\n\n            img {\n              vertical-align: middle;\n            }\n\n            .playlists-list-item {\n              margin-bottom: 2rem;\n            }\n\n            .playlists-list-item__img {\n              width: 100px;\n            }\n\n            .btn {\n              display: inline-block;\n              padding: 6px 12px;\n              margin-bottom: 0;\n              font-size: 14px;\n              font-weight: 400;\n              line-height: 1.428571429;\n              text-align: center;\n              white-space: nowrap;\n              vertical-align: middle;\n              background-image: none;\n              border: 1px solid transparent;\n              border-radius: 4px;\n              cursor: pointer;\n            }\n\n            .btn-primary {\n              color: #fff;\n              background-color: #428bca;\n              border-color: #357ebd;\n            }\n\n            .btn-primary:hover {\n              background-color: #5094ce;\n            }\n\n            .playlist-list-item__btn {\n              max-width: 50%;\n              position: absolute;\n              right: 0;\n              top: 0;\n            }\n\n            @media (max-width: 700px) {\n              .playlist-list-item__btn {\n                position: relative;\n                max-width: 100%;\n              }\n            }\n\n            .playlists-list-item__name {\n              display: block;\n              font-weight: bold;\n              max-width: 50%;\n            }\n\n            ul {\n              padding: 0;\n            }\n          `}\n        </style>\n      </div>\n    );\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAIA;AACA;AAKA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAUA;AAIA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AATA;AAAA;AAAA;AAoBA;AACA;AACA;AAAA;AACA;AADA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAeA;AACA;AAcA;;;;;;;;;;;;;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AAFA;AAHA;AACA;AAeA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AAIA;AACA;AAXA;AAAA;AAAA;AAAA;AACA;AAWA;AAZA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAsBA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAMA;AACA;AAnCA;AAAA;AACA;AADA;AAAA;AAAA;AAoCA;AAIA;AACA;AADA;AADA;AACA;AAxCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgDA;AACA;;;;;;AA1DA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;;;AAqDA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAKA;AAEA;AACA;AACA;AAFA;AAFA;AACA;AAMA;AACA;AAMA;AACA;AApBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqgBA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AADA;AADA;AASA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AA1CA;AAxGA;AAAA;AAAA;AAoPA;;;;AA5VA;AACA;;;;;;A","sourceRoot":""}